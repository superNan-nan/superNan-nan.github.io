[{"title":"Hello World","slug":"hello-world","date":"2021-03-20T07:04:42.432Z","updated":"2021-05-24T05:28:33.300Z","comments":true,"path":"2021/03/20/hello-world/","link":"","permalink":"http://example.com/2021/03/20/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"SpringSecurity理解","slug":"SpringSecurity理解","date":"2021-01-24T05:18:58.000Z","updated":"2021-05-24T05:22:08.749Z","comments":true,"path":"2021/01/24/SpringSecurity理解/","link":"","permalink":"http://example.com/2021/01/24/SpringSecurity%E7%90%86%E8%A7%A3/","excerpt":"","text":"@TOCSpringSecurity的重要核心功能是：==用户授权、用户认证== 特点 和Spring无缝整合 全面的权限控制 专门为Web开发而设计 旧版本不能脱离Web 新版本对整个框架进行了分层抽取，分成了核心模块和Web模块。单独引入核心模块就可以脱离Web环境 重量级SpringSecurity的Hello项目创建一个项目第一步：创建一个SpringBoot项目。 第二步：引入需要的依赖。 1234567891011121314151617&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 第三步：创建TestController 1234567891011121314151617package com.yyp.securitydemo1.controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping(&quot;/test&quot;)public class TestController &#123; @GetMapping(&quot;/hello&quot;) public String hello()&#123; return &quot;hello security&quot;; &#125;&#125; 运行这个项目上面我们创建了一个非常简单的SpringBoot的项目，当我们运行的时候回发成上面呢？首先我们疑惑地是。这个页面哪里来的，为什么回来到这个页面，我们访问的controller有没有访问到呢？这个我在接下来会告诉大家，现在我们来登录一下，SpringSecurity默认的用户名是user密码会在后台告诉我们。登录之后，我们就访问到了我们的controller SpringSecurity的本质SpringSecurity的本质就是过滤器链FilterSecurityInterceptor：是一个方法的权限过滤器，基本位于过滤链的最底层ExceptionTranslationFilter：是一个异常过滤器，用来处理在认证授权过程中抛出的异常UsernamePasswordAuthenticationFilter：对/login的POST请求做拦截，校验表单中的用户名，密码 过滤器是如何加载的？1、使用SpringSecurity配置过滤器2、DelegatingFilterProxy类中的doFilter会首先运行3、在doFilter方法中delegateToUse = initDelegate(wac);调用initDelegate方法4、Filter delegate = (Filter)wac.getBean(targetBeanName, Filter.class);在当前作用域获取对象名字为springSecurityFilterChain的，返回一个过滤器对象。 SpringSecurity设置登录的用户名和密码1、用过配置文件直接在application.yaml中配置就可以 2、通过配置类1234567891011121314151617181920212223242526package com.yyp.securitydemo1.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123; @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123; BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(); String password = passwordEncoder.encode(&quot;123&quot;); auth.inMemoryAuthentication().withUser(&quot;lucy&quot;).password(password).roles(&quot;admin&quot;); &#125; @Bean PasswordEncoder password()&#123; return new BCryptPasswordEncoder(); &#125;&#125; 3、自定义实现类设置==注意将配置类注释掉，删除配置文件中的配置==第一步：创建配置类，设置使用哪个userDetailsService实现类 12345678910111213141516171819202122232425262728package com.yyp.securitydemo1.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configurationpublic class SecurityConfigTest extends WebSecurityConfigurerAdapter &#123; @Autowired private UserDetailsService userDetailsService; @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123; auth.userDetailsService(userDetailsService).passwordEncoder(password()); &#125; @Bean PasswordEncoder password()&#123; return new BCryptPasswordEncoder(); &#125;&#125; 第二步：编写实现类，返回User对象，User对象有用户名密码和操作权限 123456789@Service(&quot;userDetailsService&quot;)public class MyUserDetailsService implements UserDetailsService &#123; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123; List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;role&quot;); return new User(&quot;mary&quot;,new BCryptPasswordEncoder().encode(&quot;123&quot;),auths); &#125;&#125; 我们通过数据库查到用户的用户名密码和权限，通过User来进行认证。 SpringSecurity-Web权限方案（真正的数据库实现）思路：整合一个框架MybatisPlus。 引入依赖123456789101112131415&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.3.1.tmp&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; 创建数据库和数据库表 创建实体类123456789101112131415package com.yyp.securitydemo1.entity;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@AllArgsConstructor@NoArgsConstructorpublic class Users &#123; private Integer id; private String username; private String password;&#125; 整合MybatisPlus，创建接口，继承MybatisPlus接口12public interface UsersMapper extends BaseMapper&lt;Users&gt; &#123;&#125; 在MyUserDetailsService调用mapper里面得方法查询数据库进行用户认证12345678910111213141516171819202122232425262728293031323334353637package com.yyp.securitydemo1.service;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.yyp.securitydemo1.entity.Users;import com.yyp.securitydemo1.mapper.UsersMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.AuthorityUtils;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import java.util.List;@Service(&quot;userDetailsService&quot;)public class MyUserDetailsService implements UserDetailsService &#123; @Autowired private UsersMapper usersMapper; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123; QueryWrapper&lt;Users&gt; wrapper = new QueryWrapper(); wrapper.eq(&quot;username&quot;,username); Users user = usersMapper.selectOne(wrapper); if (user == null)&#123; throw new UsernameNotFoundException(&quot;用户名不存在!&quot;); &#125; List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;role&quot;); return new User(user.getUsername(),new BCryptPasswordEncoder().encode(user.getPassword()),auths); &#125;&#125; 添加mapper扫描","categories":[],"tags":[]},{"title":"如何搭建一个SSM框架的项目","slug":"如何搭建一个SSM框架的项目","date":"2021-01-20T05:32:41.000Z","updated":"2021-05-24T05:35:09.331Z","comments":true,"path":"2021/01/20/如何搭建一个SSM框架的项目/","link":"","permalink":"http://example.com/2021/01/20/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AASSM%E6%A1%86%E6%9E%B6%E7%9A%84%E9%A1%B9%E7%9B%AE/","excerpt":"","text":"@TOC==拒绝白嫖，白嫖有罪，点个赞再走呗== 首先要有哪些配置（准备工作1）环境要求IDE：IDEA数据库：MySQLTomCat 8Maven 3.6自身要求：需要熟练掌握数据库，spring，JavaWeb及MyBatis知识，简单的前段知识 数据库要求 开始搭建项目（准备工作2）1、新建一maven空项目！添加web的支持2、导入相关的pom依赖123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.13&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.47&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.mchange&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.5.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;2.0.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;5.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;5.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.16.10&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; == 每次导入依赖就必须添加对应的lib包，否则就会出现500错误或者tomcat直接跑不起来== 3、Maven资源过滤设置（未解决资源大于配置的一些问题，如资源加载不了等问题。）1234567891011121314151617181920&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt;&lt;/build&gt; 搭建合适的包结构 mybatis-config.xml文件两件事：第一件事：起别名（可以不起，但是后面的开发都需要写类的全名）第二件事：注册Mapper（按照我的模板写，将Mapper放在dao层下面，直接扫描包就行了） 1234567&lt;typeAliases&gt; &lt;package name=&quot;com.yyp.pojo&quot;/&gt; &lt;/typeAliases&gt; &lt;mappers&gt; &lt;package name=&quot;com.yyp.dao&quot;/&gt; &lt;/mappers&gt; 编写实体类我们偷懒使用lombok插件，（导入依赖即可使用，我们上面已经导入过了） 123456789@Data//get，set方法@AllArgsConstructor//有参构造，但是会将无参构造给干掉@NoArgsConstructor//上面的注解会将无参构造给干掉，下面可以加上无参构造public class Books &#123; private int bookID; private String bookName; private int bookCounts; private String detail;&#125; 完成dao层首先我们需要一个接口和一个配置文件对吧，来嘛==接口== 123456789101112131415161718192021public interface BookMapper &#123; //增加一本书 int addBook(Books books); //删除一本书 int deleteBookByID(@Param(&quot;bookid&quot;) int id); //更新一本书 int updateBook(Books books); //查询一本书 Books queryBookByID(@Param(&quot;bookid&quot;) int id); //查询全部书 List&lt;Books&gt; queryAllBook(); //查询书籍 Books queryBookByName(@Param(&quot;bookName&quot;) String bookName);&#125; ==配置文件== 123456789101112131415161718192021222324252627282930313233&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.yyp.dao.BookMapper&quot;&gt; &lt;insert id=&quot;addBook&quot; parameterType=&quot;Books&quot;&gt; insert into ssmbuild.books(bookName,bookCounts,detail) value (#&#123;bookName&#125;,#&#123;bookCounts&#125;,#&#123;detail&#125;) &lt;/insert&gt; &lt;delete id=&quot;deleteBookByID&quot; parameterType=&quot;int&quot;&gt; delete from ssmbuild.books where bookID = #&#123;bookid&#125; &lt;/delete&gt; &lt;update id=&quot;updateBook&quot; parameterType=&quot;Books&quot;&gt; update ssmbuild.books set bookName=#&#123;bookName&#125;,bookCounts=#&#123;bookCounts&#125;,detail=#&#123;detail&#125; where bookID=#&#123;bookID&#125; &lt;/update&gt; &lt;select id=&quot;queryBookByID&quot; resultType=&quot;Books&quot;&gt; select * from ssmbuild.books where bookID=#&#123;bookid&#125; &lt;/select&gt; &lt;select id=&quot;queryAllBook&quot; resultType=&quot;Books&quot;&gt; select * from ssmbuild.books &lt;/select&gt; &lt;select id=&quot;queryBookByName&quot; resultType=&quot;Books&quot;&gt; select * from ssmbuild.books where BookName=#&#123;bookName&#125; &lt;/select&gt; &lt;/mapper&gt; 这就是我们在Mybatis中学习的基本的Mapper的使用，不懂得可以去看Mybatis Service层service层就是调用dao层实现一些业务的，由于我们是一个干净的模板，所有没有特别复杂的业务，直接调用dao层就可以出来结果，因此我们的servic层和dao层有点相似，但是不能省略。service是一个接口一个实现类，来嘛==接口== 1234567891011121314151617181920public interface BookService &#123; //增加一本书 int addBook(Books books); //删除一本书 int deleteBookByID( int id); //更新一本书 int updateBook(Books books); //查询一本书 Books queryBookByID( int id); //查询全部书 List&lt;Books&gt; queryAllBook(); //查询书籍 Books queryBookByName(String bookName);&#125; ==实现类== 12345678910111213141516171819202122232425262728293031323334public class BookserviceImpl implements BookService&#123; //service掉dao层:组合Dao @Autowired private BookMapper bookMapper; public void setBookMapper(BookMapper bookMapper) &#123; this.bookMapper = bookMapper; &#125; public int addBook(Books books) &#123; return bookMapper.addBook(books); &#125; public int deleteBookByID(int id) &#123; return bookMapper.deleteBookByID(id); &#125; public int updateBook(Books books) &#123; return bookMapper.updateBook(books); &#125; public Books queryBookByID(int id) &#123; return bookMapper.queryBookByID(id); &#125; public List&lt;Books&gt; queryAllBook() &#123; return bookMapper.queryAllBook(); &#125; public Books queryBookByName(String bookName) &#123; return bookMapper.queryBookByName(bookName); &#125;&#125; spring-dao.xml数据库配置文件1234jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=falsejdbc.username=rootjdbc.password=exin741963 这里要写自己的数据库配置，而且前面的jdbc.不能省略，否侧会出现数据库错误，可以先省略试一次错误，这样以后就不会出错了。 四步曲：1、关联数据库文件 1&lt;context:property-placeholder location=&quot;classpath:database.properties&quot;/&gt; 2、连接池 123456789101112131415&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt; &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt; &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt; &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt; &lt;!--c3p0连接池的私有属性--&gt; &lt;property name=&quot;maxPoolSize&quot; value=&quot;30&quot;/&gt; &lt;property name=&quot;minPoolSize&quot; value=&quot;10&quot;/&gt; &lt;!--关闭连接后不自动commit--&gt; &lt;property name=&quot;autoCommitOnClose&quot; value=&quot;false&quot;/&gt; &lt;!--获取连接超时时间--&gt; &lt;property name=&quot;checkoutTimeout&quot; value=&quot;10000&quot;/&gt; &lt;!--当获取连接失败重试次数--&gt; &lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;2&quot;/&gt; &lt;/bean&gt; 3、SqlSessionFactor 12345&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;!--绑定mybatis的配置文件--&gt; &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt; &lt;/bean&gt; 4、配置dao接口扫描包，动态的实现了Dao接口可以注入到spring容器 123456&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;!--注入SqlSessionFactory--&gt; &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;/&gt; &lt;!--要扫描的dao包--&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.yyp.dao&quot;/&gt; &lt;/bean&gt; spring-service.xml三部曲（主要就是spring5的bean的东西）1、扫描service下的包 1&lt;context:component-scan base-package=&quot;com.yyp.service&quot;/&gt; 2、将我们的所有业务类，注入到Spring，可以通过配置或注解实现 123&lt;bean id=&quot;BookserviceImpl&quot; class=&quot;com.yyp.service.BookserviceImpl&quot;&gt; &lt;property name=&quot;bookMapper&quot; ref=&quot;bookMapper&quot;/&gt;&lt;/bean&gt; 3、声明事务配置 1234&lt;bean id=&quot;transactionManage&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;!--注入数据源--&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;/bean&gt; 这一步可能会出错，原因是你没有将这几个容器（xml配置文件）放在一些。最简单的解决的方法就是在applicationContext导入这些配置文件。在我们编写mvc的配置文件之后，我就不在提示了。 spring mvc的配置web.xml主要就是DispathchServlet 1234567891011121314&lt;!--DispatchServlet--&gt;&lt;servlet&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 乱码处理 123456789101112&lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; session这是有效时长 123&lt;session-config&gt; &lt;session-timeout&gt;15&lt;/session-timeout&gt; &lt;/session-config&gt; spring-mvc.xml1、注解驱动 1&lt;mvc:annotation-driven/&gt; 2、静态资源过滤 1&lt;mvc:default-servlet-handler/&gt; 3、扫描包：controller 1&lt;contest:component-scan base-package=&quot;com.yyp.controller&quot;/&gt; 4、视图解析器 1234&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;/&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;&lt;/bean&gt; 以上就是全部的准备工作，下面是业务，不在讲解，代码自己参考。controller1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465@Controller@RequestMapping(&quot;/book&quot;)public class BookController &#123; @Autowired @Qualifier(&quot;BookserviceImpl&quot;) private BookService bookService; //查询全部的书籍，并且返回到一个书籍展示页面 @RequestMapping(&quot;/allBook&quot;) public String list(Model model)&#123; List&lt;Books&gt; list = bookService.queryAllBook(); model.addAttribute(&quot;list&quot;,list); return &quot;allBook&quot;; &#125; //跳转到增加书籍页面 @RequestMapping(&quot;toAddBook&quot;) public String toAddPager()&#123; return &quot;addBook&quot;; &#125; //添加书籍的请求 @RequestMapping(&quot;addBook&quot;) public String addBook(Books books)&#123; bookService.addBook(books); return &quot;redirect:/book/allBook&quot;; &#125; //跳转到书籍页面 @RequestMapping(&quot;toUpdatePager&quot;) public String toUpdatePager(int id,Model model)&#123; Books books = bookService.queryBookByID(id); model.addAttribute(&quot;QBook&quot;,books); return &quot;updateBook&quot;; &#125; //修改书籍 @RequestMapping(&quot;/updateBook&quot;) public String updateBook(Books books)&#123; bookService.updateBook(books); return &quot;redirect:/book/allBook&quot;; &#125; //删除书籍 @RequestMapping(&quot;deleteBook&quot;) public String deleteBook(int id)&#123; bookService.deleteBookByID(id); return &quot;redirect:/book/allBook&quot;; &#125; //查询书籍 @RequestMapping(&quot;queryBook&quot;) public String queryBook(String queryBookName,Model model)&#123; Books books = bookService.queryBookByName(queryBookName); List&lt;Books&gt; list = new ArrayList&lt;Books&gt;(); list.add(books); if(books==null)&#123; list = bookService.queryAllBook(); model.addAttribute(&quot;error&quot;,&quot;未查到&quot;); &#125; model.addAttribute(&quot;list&quot;,list); return &quot;allBook&quot;; &#125;&#125; jsp页面index.jsp123456789101112131415161718192021222324252627282930&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;首页&lt;&#x2F;title&gt; &lt;style&gt; a&#123; text-decoration: none; color: #00ffe1; font-size: 18px; &#125; h3&#123; width: 180px; height: 38px; margin: 100px auto; text-align: center; line-height: 38px; background: deepskyblue; border-radius: 5px ; &#125; &lt;&#x2F;style&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h3&gt;&lt;a href&#x3D;&quot;&#x2F;book&#x2F;allBook&quot;&gt;跳转书籍页面&lt;&#x2F;a&gt; &lt;&#x2F;h3&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; addBook.jsp1234567891011121314151617181920212223242526272829303132333435363738394041&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;添加书籍页面&lt;&#x2F;title&gt; &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div class&#x3D;&quot;container&quot;&gt; &lt;div class&#x3D;&quot;row clearfix&quot;&gt; &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt; &lt;div class&#x3D;&quot;page-header&quot;&gt; &lt;small&gt;新增书记&lt;&#x2F;small&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;form action&#x3D;&quot;&#x2F;book&#x2F;addBook&quot; method&#x3D;&quot;post&quot;&gt; &lt;div class&#x3D;&quot;form-group&quot;&gt; &lt;label for&#x3D;&quot;bkname&quot;&gt;书籍名称&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;bkname&quot; name&#x3D;&quot;bookName&quot; required&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;form-group&quot;&gt; &lt;label for&#x3D;&quot;bkcounts&quot;&gt;书籍数量&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;bkcounts&quot; name&#x3D;&quot;bookCounts&quot; required&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;form-group&quot;&gt; &lt;label for&#x3D;&quot;detali&quot;&gt;书籍详情&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;detali&quot; name&#x3D;&quot;detail&quot; required&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;form-group&quot;&gt; &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;form-control&quot; value&#x3D;&quot;添加&quot;&gt; &lt;&#x2F;div&gt; &lt;&#x2F;form&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; allBook.jsp123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;书籍展示页面&lt;&#x2F;title&gt; &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;div class&#x3D;&quot;container&quot;&gt; &lt;div class&#x3D;&quot;row clearfix&quot;&gt; &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt; &lt;div class&#x3D;&quot;page-header&quot;&gt; &lt;small&gt;书籍列表——————显示所有书籍&lt;&#x2F;small&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;row&quot;&gt; &lt;div class&#x3D;&quot;col-md-4 column&quot;&gt; &lt;a class&#x3D;&quot;btn btn-primary&quot; href&#x3D;&quot;&#x2F;book&#x2F;toAddBook&quot;&gt;新增书籍&lt;&#x2F;a&gt; &lt;a class&#x3D;&quot;btn btn-primary&quot; href&#x3D;&quot;&#x2F;book&#x2F;allBook&quot;&gt;显示全部书籍&lt;&#x2F;a&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;col-md-4 column&quot;&gt;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;form-inline&quot;&gt; &lt;form action&#x3D;&quot;&#x2F;book&#x2F;queryBook&quot; method&#x3D;&quot;post&quot; style&#x3D;&quot;float: right&quot;&gt; &lt;span style&#x3D;&quot;color: red&quot;&gt;$&#123;error&#125;&lt;&#x2F;span&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;queryBookName&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;请输入要查询的书籍名称&quot;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;查询&quot; class&#x3D;&quot;btn btn-primary&quot;&gt; &lt;&#x2F;form&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;row clearfix&quot;&gt; &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt; &lt;table class&#x3D;&quot;table table-hover table-striper&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;书籍编号&lt;&#x2F;th&gt; &lt;th&gt;书籍名称&lt;&#x2F;th&gt; &lt;th&gt;书籍数量&lt;&#x2F;th&gt; &lt;th&gt;书籍详情&lt;&#x2F;th&gt; &lt;th&gt;操作&lt;&#x2F;th&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;thead&gt; &lt;%--书籍从数据库中查询出来，从这个list中便利出来：foreach--%&gt; &lt;tbody&gt; &lt;c:forEach var&#x3D;&quot;book&quot; items&#x3D;&quot;$&#123;list&#125;&quot;&gt; &lt;tr&gt; &lt;td&gt;$&#123;book.bookID&#125;&lt;&#x2F;td&gt; &lt;td&gt;$&#123;book.bookName&#125;&lt;&#x2F;td&gt; &lt;td&gt;$&#123;book.bookCounts&#125;&lt;&#x2F;td&gt; &lt;td&gt;$&#123;book.detail&#125;&lt;&#x2F;td&gt; &lt;td&gt; &lt;a href&#x3D;&quot;&#x2F;book&#x2F;toUpdatePager?id&#x3D;$&#123;book.bookID&#125;&quot;&gt;修改&lt;&#x2F;a&gt; &amp;nbsp; | &amp;nbsp; &lt;a href&#x3D;&quot;&#x2F;book&#x2F;deleteBook?id&#x3D;$&#123;book.bookID&#125;&quot;&gt;删除&lt;&#x2F;a&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;c:forEach&gt; &lt;&#x2F;tbody&gt; &lt;&#x2F;table&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; updateBook.jsp123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;&lt;%-- Created by IntelliJ IDEA. User: 27211 Date: 2021&#x2F;3&#x2F;16 Time: 22:48 To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;修改书籍页面&lt;&#x2F;title&gt; &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div class&#x3D;&quot;container&quot;&gt; &lt;div class&#x3D;&quot;row clearfix&quot;&gt; &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt; &lt;div class&#x3D;&quot;page-header&quot;&gt; &lt;small&gt;修改书记&lt;&#x2F;small&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;form action&#x3D;&quot;&#x2F;book&#x2F;updateBook&quot; method&#x3D;&quot;post&quot;&gt; &lt;%--id没有传送，前段传递隐藏域--%&gt; &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;bookID&quot; value&#x3D;&quot;$&#123;QBook.bookID&#125;&quot;&gt; &lt;div class&#x3D;&quot;form-group&quot;&gt; &lt;label for&#x3D;&quot;bkname&quot;&gt;书籍名称&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;bkname&quot; name&#x3D;&quot;bookName&quot; required value&#x3D;&quot;$&#123;QBook.bookName&#125;&quot;&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;form-group&quot;&gt; &lt;label for&#x3D;&quot;bkcounts&quot;&gt;书籍数量&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;bkcounts&quot; name&#x3D;&quot;bookCounts&quot; required value&#x3D;&quot;$&#123;QBook.bookCounts&#125;&quot;&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;form-group&quot;&gt; &lt;label for&#x3D;&quot;detali&quot;&gt;书籍详情&lt;&#x2F;label&gt; &lt;input type&#x3D;&quot;text&quot; class&#x3D;&quot;form-control&quot; id&#x3D;&quot;detali&quot; name&#x3D;&quot;detail&quot; required value&#x3D;&quot;$&#123;QBook.detail&#125;&quot;&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;form-group&quot;&gt; &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;form-control&quot; value&#x3D;&quot;修改&quot;&gt; &lt;&#x2F;div&gt; &lt;&#x2F;form&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;","categories":[],"tags":[]}]