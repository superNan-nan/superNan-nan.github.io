[{"title":"Hello World","slug":"hello-world","date":"2021-03-20T07:04:42.432Z","updated":"2021-03-21T04:58:00.597Z","comments":true,"path":"2021/03/20/hello-world/","link":"","permalink":"http://example.com/2021/03/20/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"SpringSecurity理解","slug":"SpringSecurity理解","date":"2021-01-24T05:18:58.000Z","updated":"2021-05-24T05:22:08.749Z","comments":true,"path":"2021/01/24/SpringSecurity理解/","link":"","permalink":"http://example.com/2021/01/24/SpringSecurity%E7%90%86%E8%A7%A3/","excerpt":"","text":"@TOCSpringSecurity的重要核心功能是：==用户授权、用户认证== 特点 和Spring无缝整合 全面的权限控制 专门为Web开发而设计 旧版本不能脱离Web 新版本对整个框架进行了分层抽取，分成了核心模块和Web模块。单独引入核心模块就可以脱离Web环境 重量级SpringSecurity的Hello项目创建一个项目第一步：创建一个SpringBoot项目。 第二步：引入需要的依赖。 1234567891011121314151617&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 第三步：创建TestController 1234567891011121314151617package com.yyp.securitydemo1.controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping(&quot;/test&quot;)public class TestController &#123; @GetMapping(&quot;/hello&quot;) public String hello()&#123; return &quot;hello security&quot;; &#125;&#125; 运行这个项目上面我们创建了一个非常简单的SpringBoot的项目，当我们运行的时候回发成上面呢？首先我们疑惑地是。这个页面哪里来的，为什么回来到这个页面，我们访问的controller有没有访问到呢？这个我在接下来会告诉大家，现在我们来登录一下，SpringSecurity默认的用户名是user密码会在后台告诉我们。登录之后，我们就访问到了我们的controller SpringSecurity的本质SpringSecurity的本质就是过滤器链FilterSecurityInterceptor：是一个方法的权限过滤器，基本位于过滤链的最底层ExceptionTranslationFilter：是一个异常过滤器，用来处理在认证授权过程中抛出的异常UsernamePasswordAuthenticationFilter：对/login的POST请求做拦截，校验表单中的用户名，密码 过滤器是如何加载的？1、使用SpringSecurity配置过滤器2、DelegatingFilterProxy类中的doFilter会首先运行3、在doFilter方法中delegateToUse = initDelegate(wac);调用initDelegate方法4、Filter delegate = (Filter)wac.getBean(targetBeanName, Filter.class);在当前作用域获取对象名字为springSecurityFilterChain的，返回一个过滤器对象。 SpringSecurity设置登录的用户名和密码1、用过配置文件直接在application.yaml中配置就可以 2、通过配置类1234567891011121314151617181920212223242526package com.yyp.securitydemo1.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configurationpublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123; @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123; BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(); String password = passwordEncoder.encode(&quot;123&quot;); auth.inMemoryAuthentication().withUser(&quot;lucy&quot;).password(password).roles(&quot;admin&quot;); &#125; @Bean PasswordEncoder password()&#123; return new BCryptPasswordEncoder(); &#125;&#125; 3、自定义实现类设置==注意将配置类注释掉，删除配置文件中的配置==第一步：创建配置类，设置使用哪个userDetailsService实现类 12345678910111213141516171819202122232425262728package com.yyp.securitydemo1.config;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configurationpublic class SecurityConfigTest extends WebSecurityConfigurerAdapter &#123; @Autowired private UserDetailsService userDetailsService; @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception &#123; auth.userDetailsService(userDetailsService).passwordEncoder(password()); &#125; @Bean PasswordEncoder password()&#123; return new BCryptPasswordEncoder(); &#125;&#125; 第二步：编写实现类，返回User对象，User对象有用户名密码和操作权限 123456789@Service(&quot;userDetailsService&quot;)public class MyUserDetailsService implements UserDetailsService &#123; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123; List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;role&quot;); return new User(&quot;mary&quot;,new BCryptPasswordEncoder().encode(&quot;123&quot;),auths); &#125;&#125; 我们通过数据库查到用户的用户名密码和权限，通过User来进行认证。 SpringSecurity-Web权限方案（真正的数据库实现）思路：整合一个框架MybatisPlus。 引入依赖123456789101112131415&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.3.1.tmp&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; 创建数据库和数据库表 创建实体类123456789101112131415package com.yyp.securitydemo1.entity;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@AllArgsConstructor@NoArgsConstructorpublic class Users &#123; private Integer id; private String username; private String password;&#125; 整合MybatisPlus，创建接口，继承MybatisPlus接口12public interface UsersMapper extends BaseMapper&lt;Users&gt; &#123;&#125; 在MyUserDetailsService调用mapper里面得方法查询数据库进行用户认证12345678910111213141516171819202122232425262728293031323334353637package com.yyp.securitydemo1.service;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.yyp.securitydemo1.entity.Users;import com.yyp.securitydemo1.mapper.UsersMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.AuthorityUtils;import org.springframework.security.core.userdetails.User;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import java.util.List;@Service(&quot;userDetailsService&quot;)public class MyUserDetailsService implements UserDetailsService &#123; @Autowired private UsersMapper usersMapper; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123; QueryWrapper&lt;Users&gt; wrapper = new QueryWrapper(); wrapper.eq(&quot;username&quot;,username); Users user = usersMapper.selectOne(wrapper); if (user == null)&#123; throw new UsernameNotFoundException(&quot;用户名不存在!&quot;); &#125; List&lt;GrantedAuthority&gt; auths = AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;role&quot;); return new User(user.getUsername(),new BCryptPasswordEncoder().encode(user.getPassword()),auths); &#125;&#125; 添加mapper扫描","categories":[],"tags":[]}]